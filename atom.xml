<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>試毅-思伟</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://joeybling.github.io/"/>
  <updated>2018-04-17T09:07:10.314Z</updated>
  <id>https://joeybling.github.io/</id>
  
  <author>
    <name>試毅-思伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 查看网卡UUID</title>
    <link href="https://joeybling.github.io/2018/04/17/Linux-%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1UUID/"/>
    <id>https://joeybling.github.io/2018/04/17/Linux-查看网卡UUID/</id>
    <published>2018-04-17T08:03:00.000Z</published>
    <updated>2018-04-17T09:07:10.314Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux-查看网卡UUID"><a href="#Linux-查看网卡UUID" class="headerlink" title="Linux 查看网卡UUID"></a>Linux 查看网卡UUID</h4><h6 id="1、首先我们查看一下nmcli是哪个软件包提供的"><a href="#1、首先我们查看一下nmcli是哪个软件包提供的" class="headerlink" title="1、首先我们查看一下nmcli是哪个软件包提供的"></a>1、首先我们查看一下nmcli是哪个软件包提供的</h6><pre><code># yum provides &quot;*/nmcli&quot;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-a42d314368eebd8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><a id="more"></a></p><h6 id="2、安装NetworkManager服务"><a href="#2、安装NetworkManager服务" class="headerlink" title="2、安装NetworkManager服务"></a>2、安装NetworkManager服务</h6><pre><code># yum -y install NetworkManager</code></pre><h6 id="3、启动NetworkManager服务"><a href="#3、启动NetworkManager服务" class="headerlink" title="3、启动NetworkManager服务"></a>3、启动NetworkManager服务</h6><pre><code># service NetworkManager start</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-21dd8cfcd7fc0216.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h6 id="4、查看网卡UUID"><a href="#4、查看网卡UUID" class="headerlink" title="4、查看网卡UUID"></a>4、查看网卡UUID</h6><pre><code># nmcli con  tips:如果有发现有报错# Error: could not connect to D-Bus.tips:查看/var/log/messages日志# vi /var/log/messagestips:按两下大写的G跳到最后一页</code></pre><p>报错：</p><pre><code>...Apr 20 14:53:05 localhost NetworkManager[2013]: &lt;info&gt; NetworkManager (version 0.8.1-113.el6) is starting...Apr 20 14:53:05 localhost NetworkManager[2013]: &lt;info&gt; Read config file /etc/NetworkManager/NetworkManager.confApr 20 14:53:05 localhost NetworkManager[2013]: &lt;error&gt; [1492671185.606620] [nm-dbus-manager.c:278] nm_dbus_manager_init_bus(): Could not get the system bus.  Make sure the message bus daemon is running!  Message: Failed to connect to socket /var/run/dbus/system_bus_socket: Connection refused...</code></pre><p>需要先启动messagebus，再启动NetworkManager</p><pre><code># /etc/init.d/messagebus starttips:重新启动# service NetworkManager start</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-1d945ece865909ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h6 id="运行nmcli"><a href="#运行nmcli" class="headerlink" title="运行nmcli"></a>运行nmcli</h6><pre><code># nmcli con</code></pre><p>报错:<br><img src="https://upload-images.jianshu.io/upload_images/2743275-77a46ad27ca920e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code>查看/var/log/messages日志# vi /var/log/messages</code></pre><p>发现有报错<br><img src="https://upload-images.jianshu.io/upload_images/2743275-8e47a7a12aeb9e68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h6 id="g-slist-free-full-属于glist-的一个方法，缺少glist"><a href="#g-slist-free-full-属于glist-的一个方法，缺少glist" class="headerlink" title="g_slist_free_full 属于glist 的一个方法，缺少glist"></a>g_slist_free_full 属于glist 的一个方法，缺少glist</h6><h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h6><pre><code># yum -y install glib2-devel</code></pre><h6 id="3、此时再运行nmcli即可查看网卡UUID"><a href="#3、此时再运行nmcli即可查看网卡UUID" class="headerlink" title="3、此时再运行nmcli即可查看网卡UUID"></a>3、此时再运行nmcli即可查看网卡UUID</h6><pre><code># service NetworkManager start# nmcli con</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-ad3b6fb7812e01d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      Linux 查看网卡UUID
    
    </summary>
    
    
      <category term="Linux" scheme="https://joeybling.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 卸载分区</title>
    <link href="https://joeybling.github.io/2018/04/17/Linux-%E5%8D%B8%E8%BD%BD%E5%88%86%E5%8C%BA/"/>
    <id>https://joeybling.github.io/2018/04/17/Linux-卸载分区/</id>
    <published>2018-04-17T08:01:30.000Z</published>
    <updated>2018-04-17T08:02:51.298Z</updated>
    
    <content type="html"><![CDATA[<h5 id="注意，卸载分区会格式化分区内所有的数据，请谨慎操作或进行数据备份"><a href="#注意，卸载分区会格式化分区内所有的数据，请谨慎操作或进行数据备份" class="headerlink" title="注意，卸载分区会格式化分区内所有的数据，请谨慎操作或进行数据备份"></a>注意，卸载分区会格式化分区内所有的数据，请谨慎操作或进行数据备份</h5><pre><code># df -hT</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-d7fb0c77ed1e94d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><a id="more"></a>    <pre><code>准备卸载/dev/sda6这个分区# umount /data2    重新检查一下 # df -hT</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-2af8caea924f6612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code># fdisk -l发现待分区的磁盘 /dev/sda</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-c079a22b84557f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code>对该磁盘进行卸载分区，输入m并回车# fdisk /dev/sda# m 输入帮助# p 打印分区表</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-85bcd2afce1808d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2743275-95439e347a38fcf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>卸载/dev/sda6分区<br>此时注意/dev/sda6是刚刚卸载了/data2的分区名<br><img src="https://upload-images.jianshu.io/upload_images/2743275-d7fb0c77ed1e94d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code># d 删除一个分区# 6  删除第六个分区</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-b7cbc678d5616a01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code>重新打印分区表发现已卸载/dev/sda6分区# p </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-8969029b19517563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code># w   将表写入磁盘并退出再检查一遍# fdisk /dev/sda# p 打印分区表 </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-fc6779f38f7ccb43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2743275-40d4fd8413ae4065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      Linux 卸载分区
    
    </summary>
    
    
      <category term="Linux" scheme="https://joeybling.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 新建扩展分区</title>
    <link href="https://joeybling.github.io/2018/04/17/Linux-%E6%96%B0%E5%BB%BA%E6%89%A9%E5%B1%95%E5%88%86%E5%8C%BA/"/>
    <id>https://joeybling.github.io/2018/04/17/Linux-新建扩展分区/</id>
    <published>2018-04-17T07:59:52.000Z</published>
    <updated>2018-04-17T09:08:55.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fdisk-l"><a href="#fdisk-l" class="headerlink" title="fdisk -l"></a>fdisk -l</h1><p><img src="https://upload-images.jianshu.io/upload_images/2743275-a3f8dba4931f0e69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>要进行新建扩展分区的磁盘是 /dev/sda<br><a id="more"></a></p><pre><code># fdisk /dev/sda# p  打印分区表</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-547ba5ce1f898e88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>此时磁盘已经有了3个分区，如果要再弄2个分区就不行，这个时候我们进行新建扩展分区</p><pre><code># n  添加一个新的分区# e  添加一个扩展分区# p  打印分区表</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-4c842484993e6eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>此时已经看见扩展分区创建完成，在扩展分区下面新建2个分区<br>因为现在扩展分区是20G  所以下面的2个分区都给10G</p><pre><code># n# +10G# p</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-720c53c845ce00b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2743275-37380dc4f6e9a485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>重复上面的操作</p><pre><code># n# 回车# 回车   此时回车等于把磁盘剩下的所有空间给了此分区# p</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-a8dbb997e23e1066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2743275-591af00ad28e8d7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>创建完毕  保存并重启</p><pre><code># w# reboot</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-7f03551e8e9ec095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>重新登入系统</p><pre><code># fdisk -l</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-e2e92df2a2148520.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>需要格式化 /dev/sda5   /dev/sda6 分区</p><pre><code>ext4是磁盘文件系统的格式，也可以是ext3# mkfs -t ext4 /dev/sda5# mkfs -t ext4 /dev/sda6</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-8d5cf4a6f7464a29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2743275-1d8943f50b678455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code># mount /dev/sda5 /data报错:mount: mount point /data does not exist原因是根目录没有此文件夹创建文件夹# mkdir /data# mkdir /data2# mount /dev/sda5 /data   把分区 /dev/sda5 挂载到 /data 目录下# mount /dev/sda6 /data2  把分区 /dev/sda6 挂载到 /data2 目录下# df -hT  查看是否挂载成功</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-79b686cdd3f0e8c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>分区格式类型是ext4 分区大小也是10G</p><h5 id="此时注意，这样机器重启后就重置了，如果需要永久生效需要设置开机自动挂载（磁盘）"><a href="#此时注意，这样机器重启后就重置了，如果需要永久生效需要设置开机自动挂载（磁盘）" class="headerlink" title="此时注意，这样机器重启后就重置了，如果需要永久生效需要设置开机自动挂载（磁盘）"></a>此时注意，这样机器重启后就重置了，如果需要永久生效需要设置开机自动挂载（磁盘）</h5><h5 id="开机自动挂载（磁盘）"><a href="#开机自动挂载（磁盘）" class="headerlink" title="开机自动挂载（磁盘）"></a>开机自动挂载（磁盘）</h5><pre><code># vi /etc/fstab</code></pre><p>最后面添加</p><pre><code>/dev/sda5 /data ext4 defaults 0 0/dev/sda6 /data2 ext4 defaults 0 0</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-59ae777451c4b097.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h3><h6 id="第一列：分区的UUID或分区名-例如-dev-sda5"><a href="#第一列：分区的UUID或分区名-例如-dev-sda5" class="headerlink" title="第一列：分区的UUID或分区名 例如:/dev/sda5"></a>第一列：分区的UUID或分区名 例如:/dev/sda5</h6><h6 id="第二列：Mount-point：设备的挂载点，就是你要挂载到哪个目录下。"><a href="#第二列：Mount-point：设备的挂载点，就是你要挂载到哪个目录下。" class="headerlink" title="第二列：Mount point：设备的挂载点，就是你要挂载到哪个目录下。"></a>第二列：Mount point：设备的挂载点，就是你要挂载到哪个目录下。</h6><h6 id="第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等"><a href="#第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等" class="headerlink" title="第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等"></a>第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等</h6><h6 id="第四列：parameters：文件系统的参数"><a href="#第四列：parameters：文件系统的参数" class="headerlink" title="第四列：parameters：文件系统的参数"></a>第四列：parameters：文件系统的参数</h6><pre><code>Async/sync设置是否为同步方式运行，默认为asyncauto/noauto  当下载mount -a 的命令时，此文件系统是否被主动挂载。默认为autorw/ro         是否以以只读或者读写模式挂载exec/noexec         限制此文件系统内是否能够进行&quot;执行&quot;的操作user/nouser是否允许用户使用mount命令挂载suid/nosuid是否允许SUID的存在Usrquota启动文件系统支持磁盘配额模式Grpquota启动文件系统对群组磁盘配额模式的支持Defaults同事具有rw,suid,dev,exec,auto,nouser,async等默认参数的设置</code></pre><h6 id="第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1"><a href="#第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1" class="headerlink" title="第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1"></a>第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1</h6><pre><code>0    代表不要做dump备份1    代表要每天进行dump的操作2    代表不定日期的进行dump操作</code></pre><h6 id="第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。"><a href="#第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。" class="headerlink" title="第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。"></a>第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。</h6><pre><code>0    不要检验1    最早检验（一般根目录会选择）2    1级别检验完成之后进行检验</code></pre><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><pre><code>查看各个分区的UUID和磁盘文件系统的格式# blkid</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-a42a23c8dbe89e25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      Linux 新建扩展分区
    
    </summary>
    
    
      <category term="Linux" scheme="https://joeybling.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>搭建 ElasticSearch 6.1.3分布式集群</title>
    <link href="https://joeybling.github.io/2018/04/17/%E6%90%AD%E5%BB%BA-ElasticSearch-6-1-3%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/"/>
    <id>https://joeybling.github.io/2018/04/17/搭建-ElasticSearch-6-1-3分布式集群/</id>
    <published>2018-04-17T07:57:03.000Z</published>
    <updated>2018-04-17T09:10:37.948Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ELasticsearch-6-1-3要求JDK版本最低为1-8"><a href="#ELasticsearch-6-1-3要求JDK版本最低为1-8" class="headerlink" title="ELasticsearch 6.1.3要求JDK版本最低为1.8"></a>ELasticsearch 6.1.3要求JDK版本最低为1.8</h4><p>mac上的本机ip为192.168.1.111,设为master节点，配置如下：</p><pre><code>cluster.name: my-applicationnode.name: node-111network.host: 192.168.1.111http.port: 9200http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;node.master: truenode.data: truediscovery.zen.ping.unicast.hosts: [&quot;192.168.1.111&quot;]</code></pre><a id="more"></a><p>Ubuntu机器的ip位192.168.1.102，配置如下：</p><pre><code>cluster.name: my-applicationnode.name: node-102network.host: 192.168.1.102http.port: 9200http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;node.master: falsenode.data: truediscovery.zen.ping.unicast.hosts: [&quot;192.168.1.111&quot;]</code></pre><p>先启动mac上的master，再启动Ubuntu上的slave节点，观察输出，会有一个node-102探测到master节点的提示：</p><pre><code>2017-06-07T11:33:39,369][INFO ][o.e.c.s.ClusterService   ] [node-102] detected_master {node-111}{3dQd1RRVTMiKdTckM68nPQ}{H6Zu7PAQRWewUBcllsQWTQ}{192.168.1.111}{192.168.1.111:9300}, added {{node-111}{3dQd1RRVTMiKdTckM68nPQ}{H6Zu7PAQRWewUBcllsQWTQ}{192.168.1.111}{192.168.1.111:9300},}, reason: zen-disco-receive(from master [master {node-111}{3dQd1RRVTMiKdTckM68nPQ}{H6Zu7PAQRWewUBcllsQWTQ}{192.168.1.111}{192.168.1.111:9300} committed version [8]])&apos;</code></pre><p>访问head，一个master一个slave组成集群，界面如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/2743275-72a9f7da67487398?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"></p><h3 id="单机多节点集群配置"><a href="#单机多节点集群配置" class="headerlink" title="单机多节点集群配置"></a>单机多节点集群配置</h3><p>如果想要在一台机器上启动多个节点，步骤如下：</p><p>1、复制一份ELasticsearch的安装包<br>2、修改端口，比如一个是9200，一个是9205<br>3、删除data目录下的数据(如果是新解压的安装包就不必了)</p>]]></content>
    
    <summary type="html">
    
      搭建 ElasticSearch 6.1.3分布式集群
    
    </summary>
    
    
      <category term="ELK日志分析" scheme="https://joeybling.github.io/tags/ELK%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>FreeMarker 中文乱码问题解决办法</title>
    <link href="https://joeybling.github.io/2018/04/17/FreeMarker-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://joeybling.github.io/2018/04/17/FreeMarker-中文乱码问题解决办法/</id>
    <published>2018-04-17T07:53:54.000Z</published>
    <updated>2018-04-17T09:11:26.253Z</updated>
    
    <content type="html"><![CDATA[<p>解决办法一：通过修改配置文件freemarker.properties，修改默认编码：</p><pre><code>locale=zh_CNdefault_encoding=gbknumber_format=#date_format=yyyy-MM-ddtime_format=HH:mm:Ssdatetime_format=yyyy-MM-dd HH:mm:Ss</code></pre><p>还有1个办法   在contentType里设置value为text/html;charset=UTF-8”<br><a id="more"></a><br>    <!-- FreeMarker视图解析器 --><br>    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"><br>        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"><br>        <property name="contentType" value="text/html;charset=UTF-8"><br>        <property name="cache" value="false"><br>        <property name="viewNames" value="*.ftl"><br>        <property name="suffix" value=""><br>        <property name="order" value="2"><br>    </property></property></property></property></property></property></bean></p><p>解决办法二：通过spring或其他第三方工具配置：</p><pre><code>&lt;bean id=&quot;freemakerCongfig&quot;    class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&gt;       &lt;property name=&quot;templateLoaderPath&quot;&gt;       &lt;value&gt;/WEB-INF/web/&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;freemarkerSettings&quot;&gt;       &lt;props&gt;       &lt;prop key=&quot;defaultEncoding&quot;&gt;gbk&lt;/prop&gt;       &lt;/props&gt;       &lt;/property&gt;    &lt;/bean&gt;</code></pre><h6 id="页面编码和charset要跟上面配置的一致才可以，"><a href="#页面编码和charset要跟上面配置的一致才可以，" class="headerlink" title="页面编码和charset要跟上面配置的一致才可以，"></a>页面编码和charset要跟上面配置的一致才可以，</h6><pre><code>&lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=gbk&quot;&gt;</code></pre><h6 id="注意：还有一种常见的导致乱码问题：编辑器或文件保存的编码和页面设置的编码不一致会导致乱码，例如文件的编码-用记事本打开-另存为可以看到文件的编码-为UTF-8而页面的charset-gbk就会出现乱码，反之也一样。"><a href="#注意：还有一种常见的导致乱码问题：编辑器或文件保存的编码和页面设置的编码不一致会导致乱码，例如文件的编码-用记事本打开-另存为可以看到文件的编码-为UTF-8而页面的charset-gbk就会出现乱码，反之也一样。" class="headerlink" title="注意：还有一种常见的导致乱码问题：编辑器或文件保存的编码和页面设置的编码不一致会导致乱码，例如文件的编码(用记事本打开,另存为可以看到文件的编码)为UTF-8而页面的charset=gbk就会出现乱码，反之也一样。"></a>注意：还有一种常见的导致乱码问题：编辑器或文件保存的编码和页面设置的编码不一致会导致乱码，例如文件的编码(用记事本打开,另存为可以看到文件的编码)为UTF-8而页面的charset=gbk就会出现乱码，反之也一样。</h6>]]></content>
    
    <summary type="html">
    
      Spring集成FreeMarker 中文乱码问题解决办法
    
    </summary>
    
    
      <category term="Java" scheme="https://joeybling.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Druid不支持多条SQL</title>
    <link href="https://joeybling.github.io/2018/04/17/SpringBoot%E9%9B%86%E6%88%90Druid%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A4%9A%E6%9D%A1SQL/"/>
    <id>https://joeybling.github.io/2018/04/17/SpringBoot集成Druid不支持多条SQL/</id>
    <published>2018-04-17T07:49:55.000Z</published>
    <updated>2018-04-17T07:52:21.912Z</updated>
    
    <content type="html"><![CDATA[<p>在DataSource 初始化Bean 添加 </p><pre><code>List&lt;Filter&gt; proxyFilters = new ArrayList&lt;Filter&gt;();WallFilter statFilter = new WallFilter();WallConfig config = new WallConfig();config.setMultiStatementAllow(true); // 批量操作statFilter.setConfig(config);proxyFilters.add(statFilter);druidDataSource.setProxyFilters(proxyFilters);</code></pre><p>贴上自己的Config</p><pre><code>package com.wstro.config;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.sql.DataSource;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.transaction.annotation.EnableTransactionManagement;import com.alibaba.druid.filter.Filter;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.support.http.StatViewServlet;import com.alibaba.druid.support.http.WebStatFilter;import com.alibaba.druid.wall.WallConfig;import com.alibaba.druid.wall.WallFilter;</code></pre><a id="more"></a><pre><code>/** * Druid数据源配置 *  * @author Joey * @Email 2434387555@qq.com * */@Configuration@EnableTransactionManagement // 启注解事务管理public class DataSourceConfig {  private Logger logger = LoggerFactory.getLogger(DataSourceConfig.class);@Value(&quot;${spring.datasource.url}&quot;)private String dbUrl;@Value(&quot;${spring.datasource.username}&quot;)private String username;@Value(&quot;${spring.datasource.password}&quot;)private String password;@Value(&quot;${spring.datasource.driverClassName}&quot;)private String driverClassName;@Value(&quot;${spring.datasource.initialSize}&quot;)private int initialSize;@Value(&quot;${spring.datasource.minIdle}&quot;)private int minIdle;@Value(&quot;${spring.datasource.maxActive}&quot;)private int maxActive;@Value(&quot;${spring.datasource.maxWait}&quot;)private int maxWait;@Value(&quot;${spring.datasource.timeBetweenEvictionRunsMillis}&quot;)private int timeBetweenEvictionRunsMillis;@Value(&quot;${spring.datasource.minEvictableIdleTimeMillis}&quot;)private int minEvictableIdleTimeMillis;@Value(&quot;${spring.datasource.validationQuery}&quot;)private String validationQuery;@Value(&quot;${spring.datasource.testWhileIdle}&quot;)private boolean testWhileIdle;@Value(&quot;${spring.datasource.testOnBorrow}&quot;)private boolean testOnBorrow;@Value(&quot;${spring.datasource.testOnReturn}&quot;)private boolean testOnReturn;@Value(&quot;${spring.datasource.poolPreparedStatements}&quot;)private boolean poolPreparedStatements;@Value(&quot;${spring.datasource.maxPoolPreparedStatementPerConnectionSize}&quot;)private int maxPoolPreparedStatementPerConnectionSize;@Value(&quot;${spring.datasource.filters}&quot;)private String filters;@Value(&quot;${spring.datasource.connectionProperties}&quot;)private String connectionProperties;/** * 注册DruidServlet *  * @return ServletRegistrationBean */@Beanpublic ServletRegistrationBean druidServletRegistrationBean() {    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean();    servletRegistrationBean.setServlet(new StatViewServlet());    servletRegistrationBean.addUrlMappings(&quot;/druid/*&quot;);    // 白名单：    servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;127.0.0.1&quot;);    // IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not    // permitted to view this page.    // 登录查看信息的账号密码.    servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;joey&quot;);    servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;jay&quot;);    // 是否能够重置数据.    servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;);    return servletRegistrationBean;}/** * 注册DruidFilter拦截 *  * @return FilterRegistrationBean */@Beanpublic FilterRegistrationBean druidFilterRegistrationBean() {    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();    filterRegistrationBean.setFilter(new WebStatFilter());    Map&lt;String, String&gt; initParams = new HashMap&lt;String, String&gt;();    // 设置忽略请求    initParams.put(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;);    filterRegistrationBean.setInitParameters(initParams);    filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);    return filterRegistrationBean;}/** * 配置DataSource *  * @return DataSource * @throws SQLException */@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)@Primarypublic DataSource dataSource() throws SQLException {    DruidDataSource druidDataSource = new DruidDataSource();    druidDataSource.setUrl(dbUrl);    druidDataSource.setUsername(username);    druidDataSource.setPassword(password);    druidDataSource.setDriverClassName(driverClassName);    // configuration    druidDataSource.setInitialSize(initialSize);    druidDataSource.setMinIdle(minIdle);    druidDataSource.setMaxActive(maxActive);    druidDataSource.setMaxWait(maxWait);    druidDataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);    druidDataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);    druidDataSource.setValidationQuery(validationQuery);    druidDataSource.setTestWhileIdle(testWhileIdle);    druidDataSource.setTestOnBorrow(testOnBorrow);    druidDataSource.setTestOnReturn(testOnReturn);    druidDataSource.setPoolPreparedStatements(poolPreparedStatements);    druidDataSource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);    try {        List&lt;Filter&gt; proxyFilters = new ArrayList&lt;Filter&gt;();        WallFilter statFilter = new WallFilter();        WallConfig config = new WallConfig();        config.setMultiStatementAllow(true); // 批量操作        statFilter.setConfig(config);        proxyFilters.add(statFilter);        druidDataSource.setProxyFilters(proxyFilters);        druidDataSource.setFilters(filters);    } catch (SQLException e) {        logger.error(&quot;druid configuration initialization filter&quot;, e);    }    druidDataSource.setConnectionProperties(connectionProperties);    return druidDataSource;}</code></pre><p>}</p><p>properties</p><pre><code>#JDBC# \u6570\u636E\u5E93\u8BBF\u95EE\u914D\u7F6E# \u4E3B\u6570\u636E\u6E90\uFF0C\u9ED8\u8BA4\u7684spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://192.168.1.88:3306/wstro?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=root# \u4E0B\u9762\u4E3A\u8FDE\u63A5\u6C60\u7684\u8865\u5145\u8BBE\u7F6E\uFF0C\u5E94\u7528\u5230\u4E0A\u9762\u6240\u6709\u6570\u636E\u6E90\u4E2D# \u521D\u59CB\u5316\u5927\u5C0F\uFF0C\u6700\u5C0F\uFF0C\u6700\u5927spring.datasource.initialSize=5spring.datasource.minIdle=5spring.datasource.maxActive=20# \u914D\u7F6E\u83B7\u53D6\u8FDE\u63A5\u7B49\u5F85\u8D85\u65F6\u7684\u65F6\u95F4spring.datasource.maxWait=60000# \u914D\u7F6E\u95F4\u9694\u591A\u4E45\u624D\u8FDB\u884C\u4E00\u6B21\u68C0\u6D4B\uFF0C\u68C0\u6D4B\u9700\u8981\u5173\u95ED\u7684\u7A7A\u95F2\u8FDE\u63A5\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2spring.datasource.timeBetweenEvictionRunsMillis=60000# \u914D\u7F6E\u4E00\u4E2A\u8FDE\u63A5\u5728\u6C60\u4E2D\u6700\u5C0F\u751F\u5B58\u7684\u65F6\u95F4\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2spring.datasource.minEvictableIdleTimeMillis=300000spring.datasource.validationQuery=SELECT 1 FROM DUALspring.datasource.testWhileIdle=truespring.datasource.testOnBorrow=falsespring.datasource.testOnReturn=false# \u6253\u5F00PSCache\uFF0C\u5E76\u4E14\u6307\u5B9A\u6BCF\u4E2A\u8FDE\u63A5\u4E0APSCache\u7684\u5927\u5C0Fspring.datasource.poolPreparedStatements=truespring.datasource.maxPoolPreparedStatementPerConnectionSize=20# \u914D\u7F6E\u76D1\u63A7\u7EDF\u8BA1\u62E6\u622A\u7684filters\uFF0C\u53BB\u6389\u540E\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1\uFF0C&apos;wall&apos;\u7528\u4E8E\u9632\u706B\u5899spring.datasource.filters=stat,wall,log4j# \u901A\u8FC7connectProperties\u5C5E\u6027\u6765\u6253\u5F00mergeSql\u529F\u80FD\uFF1B\u6162SQL\u8BB0\u5F55spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;druid.stat.logSlowSql=true;# \u5408\u5E76\u591A\u4E2ADruidDataSource\u7684\u76D1\u63A7\u6570\u636E  #spring.datasource.useGlobalDataSourceStat=true</code></pre>]]></content>
    
    <summary type="html">
    
      SpringBoot集成Druid不支持多条SQL
    
    </summary>
    
    
      <category term="Java" scheme="https://joeybling.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux配置SSH Key到GitHub</title>
    <link href="https://joeybling.github.io/2018/04/17/Linux%E9%85%8D%E7%BD%AESSH-Key%E5%88%B0GitHub/"/>
    <id>https://joeybling.github.io/2018/04/17/Linux配置SSH-Key到GitHub/</id>
    <published>2018-04-17T06:48:40.000Z</published>
    <updated>2018-04-17T09:12:10.751Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-生成SSH-Key"><a href="#1-生成SSH-Key" class="headerlink" title="1.生成SSH Key"></a>1.生成SSH Key</h4><p>首先检查下本机是否已经安装了SSH，在终端输入ssh即可：<br><img src="https://upload-images.jianshu.io/upload_images/2743275-d5ee041fc6a3b53e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>如果没有安装进行yum安装</p><a id="more"></a><pre><code># yum -y install openssh-clients</code></pre><h6 id="接下来就是生成ssh-key了，输入ssh-keygen-t-rsa，然后连续按回车键三次（注意：千万不要输入密码！）。"><a href="#接下来就是生成ssh-key了，输入ssh-keygen-t-rsa，然后连续按回车键三次（注意：千万不要输入密码！）。" class="headerlink" title="接下来就是生成ssh key了，输入ssh-keygen -t rsa，然后连续按回车键三次（注意：千万不要输入密码！）。"></a>接下来就是生成ssh key了，输入ssh-keygen -t rsa，然后连续按回车键三次（注意：千万不要输入密码！）。</h6><p><img src="https://upload-images.jianshu.io/upload_images/2743275-7398d3f9f1eef72c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>id_rsa.pub为公钥，id_rsa为私钥，它们都是隐藏文件。<br>那么如何查看它们的内容呢？只需要继续执行以下两条命令即可。</p><pre><code># cd .ssh/# cat id_rsa.pub</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-2c142d50f896e48b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-添加SSH-Key到GitHub上"><a href="#2-添加SSH-Key到GitHub上" class="headerlink" title="2.添加SSH Key到GitHub上"></a>2.添加SSH Key到GitHub上</h4><p><img src="https://upload-images.jianshu.io/upload_images/2743275-062ea02946eb9af5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>接着执行下面操作：<br><img src="https://upload-images.jianshu.io/upload_images/2743275-d2a6a8697131e8d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点击New SSH Key按钮后进行Key的填写操作，完成SSH Key的添加。如下图：<br><img src="https://upload-images.jianshu.io/upload_images/2743275-1a8f4cd790d9d667.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/2743275-cdbdf7fd81c8ac11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>添加SSH Key成功之后，继续输入命令进行测试。</p><pre><code># ssh -T git@github.com</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/2743275-5310d1ab738cb79a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>出现上图结果则说明添加SSH Key成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-生成SSH-Key&quot;&gt;&lt;a href=&quot;#1-生成SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;1.生成SSH Key&quot;&gt;&lt;/a&gt;1.生成SSH Key&lt;/h4&gt;&lt;p&gt;首先检查下本机是否已经安装了SSH，在终端输入ssh即可：&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2743275-d5ee041fc6a3b53e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果没有安装进行yum安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://joeybling.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java中将一个文件夹下所有的文件压缩成一个文件</title>
    <link href="https://joeybling.github.io/2018/04/17/Java%E4%B8%AD%E5%B0%86%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>https://joeybling.github.io/2018/04/17/Java中将一个文件夹下所有的文件压缩成一个文件/</id>
    <published>2018-04-17T04:22:13.000Z</published>
    <updated>2018-04-15T00:23:00.886Z</updated>
    
    <content type="html"><![CDATA[<pre><code>/** 缓冲 */static final byte[] buffer = new byte[2048];  // 来源  File inputDir = new File(request.getServletContext()      .getRealPath(Constant.getUploadPath()));  if (null != inputDir.listFiles()) {      // 压缩      zip(inputDir.listFiles(), &quot;&quot;, zip);  }  </code></pre><a id="more"></a><pre><code>/** * 压缩ZIP *  * @param files *            多个文件 * @param baseFolder *            压缩到ZIP的父级目录(目录后面跟上File.separator) * @param zos *            ZipOutputStream * @throws Exception */  private static void zip(File[] files, String baseFolder, ZipOutputStream zos)          throws Exception {      // 输入      FileInputStream fis = null;      // 条目      ZipEntry entry = null;      // 数目      int count = 0;      for (File file : files) {          if (file.isDirectory()) {          // 递归          zip(file.listFiles(),  baseFolder + file.getName() + File.separator, zos);          continue;          }          entry = new ZipEntry(baseFolder + file.getName());          // 加入          zos.putNextEntry(entry);          fis = new FileInputStream(file);          // 读取          while ((count = fis.read(buffer, 0, buffer.length)) != -1) {          // 写入          zos.write(buffer, 0, count);          }          zos.closeEntry(); // 释放资源      }  }  记得用完zip要close掉</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;/** 缓冲 */
static final byte[] buffer = new byte[2048];  


// 来源  
File inputDir = new File(request.getServletContext()  
    .getRealPath(Constant.getUploadPath()));  
if (null != inputDir.listFiles()) {  
    // 压缩  
    zip(inputDir.listFiles(), &amp;quot;&amp;quot;, zip);  
}  
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://joeybling.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ELK之本地Grok Debugger配置</title>
    <link href="https://joeybling.github.io/2018/04/15/ELK%E4%B9%8B%E6%9C%AC%E5%9C%B0Grok-Debugger%E9%85%8D%E7%BD%AE/"/>
    <id>https://joeybling.github.io/2018/04/15/ELK之本地Grok-Debugger配置/</id>
    <published>2018-04-15T00:13:52.000Z</published>
    <updated>2018-04-15T00:19:51.712Z</updated>
    
    <content type="html"><![CDATA[<p>1、Ruby环境安装</p><pre><code>清理已安装过的#yum erase ruby ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs#yum remove ruby1.Ruby的安装#yum install -y wget unzip#cd /usr/local#yum -y install  openssl-devel gcc#wget https://ruby.taobao.org/mirrors/ruby/2.1/ruby-2.1.7.tar.gz#tar zxf ruby-2.1.7.tar.gz#cd ruby-2.1.7#./configure --prefix=/usr/local/ruby2.1.7#make &amp;&amp; make install#echo &apos;export PATH=/usr/local/ruby2.1.7/bin:$PATH&apos;&gt;&gt;/etc/profile#source /etc/profile说明：别使用ruby最新的2.2或者2.3的版本，可能出现部分组件无法安装</code></pre><a id="more"></a><pre><code>2. RubyGems工具安装#cd /usr/local#wget http://rubygems.global.ssl.fastly.net/rubygems/rubygems-2.6.2.tgz#tar zxf rubygems-2.6.2.tgz#cd rubygems-2.6.2#ruby setup.rb3.替换gem源,又是由于网络环境的问题，访问官方源非常慢，使用淘宝的gem源#gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/#gem sources –l4.Grokbug的安装#mkdir /usr/local/grokbug#cd /usr/local/grokbug#wget https://codeload.github.com/nickethier/grokdebug/zip/master#unzip master#mv grokdebug-master/* .#rm -rf grokdebug-master/5.Ruby组件安装(以下组件都对版本有相应的要求)查看缺少的组件#ruby config.ru就会提示组件及对应的版本#gem install bundlergem install cabin -v=0.5.0gem install haml -v=3.1.7gem install jls-grok -v=0.10.10gem install json -v=1.7.5gem install kgio -v=2.8.0gem install rack -v=1.4.1gem install rack-protection -v=1.2.0gem install raindrops -v=0.11.0gem install shotgun -v=0.9gem install tilt -v=1.3.3gem install sinatra -v=1.3.3gem install unicorn -v=4.6.36.启动服务#cd /usr/local/grokbug#nohup bundle exec unicorn -p 8080 -c ./unicorn &amp;7.关闭防火墙#service iptables stop#chkconfig iptables off8.替换Google的jquery源#cd /usr/local/grokbug#cd views </code></pre><p>###执行下面5条语句</p><pre><code>sed -i &apos;s#//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js#//lib.sinaapp.com/js/jquery/1.8.1/jquery.min.js#g&apos; index.hamlsed -i &apos;s#//ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js#//lib.sinaapp.com/js/jquery-ui/1.9.2/jquery-ui.min.js#g&apos; index.hamlsed -i &apos;s#//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js#//lib.sinaapp.com/js/jquery/1.7.2/jquery.min.js#g&apos; patterns.hamlsed -i &apos;s#//ajax.googleapis.com/ajax/libs/jqueryui/1.9.0/themes/ui-lightness/jquery-ui.css#//lib.sinaapp.com/js/jquery-ui/1.9.0/themes/ui-lightness/jquery-ui.css#g&apos; layout.hamlsed -i &apos;s#//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js#//lib.sinaapp.com/js/jquery/1.7.2/jquery.min.js#g&apos; discover.haml</code></pre><p>测试，通过web路径访问测试了<br><a href="http://master.am.com/ambari" target="_blank" rel="noopener">http://xxx</a>:8080</p><p><img src="https://upload-images.jianshu.io/upload_images/2743275-ab527d48b90f29e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、Ruby环境安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;清理已安装过的
#yum erase ruby ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs
#yum remove ruby

1.Ruby的安装
#yum install -y wget unzip
#cd /usr/local
#yum -y install  openssl-devel gcc
#wget https://ruby.taobao.org/mirrors/ruby/2.1/ruby-2.1.7.tar.gz
#tar zxf ruby-2.1.7.tar.gz
#cd ruby-2.1.7
#./configure --prefix=/usr/local/ruby2.1.7
#make &amp;amp;&amp;amp; make install
#echo &amp;apos;export PATH=/usr/local/ruby2.1.7/bin:$PATH&amp;apos;&amp;gt;&amp;gt;/etc/profile
#source /etc/profile
说明：别使用ruby最新的2.2或者2.3的版本，可能出现部分组件无法安装
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="ELK日志分析" scheme="https://joeybling.github.io/tags/ELK%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看硬件信息</title>
    <link href="https://joeybling.github.io/2018/03/17/Linux%E6%9F%A5%E7%9C%8B%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    <id>https://joeybling.github.io/2018/03/17/Linux查看硬件信息/</id>
    <published>2018-03-17T08:06:43.000Z</published>
    <updated>2018-04-17T08:15:16.499Z</updated>
    
    <content type="html"><![CDATA[<h5 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h5><pre><code># uname -a               # 查看内核/操作系统/CPU信息# head -n 1 /etc/issue   # 查看操作系统版本# cat /proc/cpuinfo      # 查看CPU信息# hostname               # 查看计算机名# lspci -tv              # 列出所有PCI设备（yum install pciutils）# lsusb -tv              # 列出所有USB设备# lsmod                  # 列出加载的内核模块# env                    # 查看环境变量  </code></pre><a id="more"></a><h5 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h5><pre><code># free -m                # 查看内存使用量和交换区使用量# df -h                  # 查看各分区使用情况# du -sh &lt;目录名&gt;        # 查看指定目录的大小# grep MemTotal /proc/meminfo   # 查看内存总量# grep MemFree /proc/meminfo    # 查看空闲内存量# uptime                 # 查看系统运行时间、用户数、负载# cat /proc/loadavg      # 查看系统负载</code></pre><h5 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h5><pre><code># mount | column -t      # 查看挂接的分区状态# fdisk -l               # 查看所有分区# swapon -s              # 查看所有交换分区# hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)# dmesg | grep IDE       # 查看启动时IDE设备检测状况</code></pre><h5 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h5><pre><code># ifconfig               # 查看所有网络接口的属性# iptables -L            # 查看防火墙设置# route -n               # 查看路由表# netstat -lntp          # 查看所有监听端口# netstat -antp          # 查看所有已经建立的连接# netstat -s             # 查看网络统计信息</code></pre><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><pre><code>  # ps -ef                 # 查看所有进程# top                    # 实时显示进程状态</code></pre><h5 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h5><pre><code># w                      # 查看活动用户# id &lt;用户名&gt;            # 查看指定用户信息# last                   # 查看用户登录日志# cut -d: -f1 /etc/passwd   # 查看系统所有用户# cut -d: -f1 /etc/group    # 查看系统所有组# crontab -l             # 查看当前用户的计划任务  </code></pre><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><pre><code># chkconfig --list       # 列出所有系统服务# chkconfig --list | grep on    # 列出所有启动的系统服务  </code></pre><h5 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h5><pre><code># rpm -qa                # 查看所有安装的软件包  </code></pre><h5 id="查看网卡型号"><a href="#查看网卡型号" class="headerlink" title="查看网卡型号"></a>查看网卡型号</h5><pre><code>#   lspci | grep Ethernet  </code></pre><h5 id="查看内存和cpu最直接最常用的命令"><a href="#查看内存和cpu最直接最常用的命令" class="headerlink" title="查看内存和cpu最直接最常用的命令"></a>查看内存和cpu最直接最常用的命令</h5><pre><code>  # free# cat /proc/cpuinfo   </code></pre><h5 id="查看硬盘信息（查看硬盘型号和硬盘序列号）"><a href="#查看硬盘信息（查看硬盘型号和硬盘序列号）" class="headerlink" title="查看硬盘信息（查看硬盘型号和硬盘序列号）"></a>查看硬盘信息（查看硬盘型号和硬盘序列号）</h5><pre><code># df -h  </code></pre>]]></content>
    
    <summary type="html">
    
      Linux查看硬件信息
    
    </summary>
    
    
      <category term="Linux" scheme="https://joeybling.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>我听说</title>
    <link href="https://joeybling.github.io/2017/01/01/%E6%88%91%E5%90%AC%E8%AF%B4/"/>
    <id>https://joeybling.github.io/2017/01/01/我听说/</id>
    <published>2017-01-01T08:57:03.000Z</published>
    <updated>2018-04-17T09:10:03.657Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2743275-9bfadb628569fe76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>　　我听说，有一种猫叫做雨猫。天气温暖时，它就变得蓬松毛绒绒的，像白云一样上浮，你可以拴着它，像放风筝一样走，它会变透明，阳光透得过它的身体。天气晦暗时它会变黑，坠在地上，满地乱跑，毛变得硬硬的，像刚刮过的胡茬一样。你得抱着它，等天气晴朗时，再把它放出去，就像风筝末梢放着一团棉花糖。</p><hr><p>　　我听说，有种青蛙，透明洁白，只吃茶叶。吃多之后，吐气如兰。冬天它便僵卧，张着大嘴，眠去一个季节。你往它肚里倒热水，水便成茶，馥郁芳香，可以倒在杯子里喝，香沁肺腑。有个女孩子，手头没有杯子，于是捧起青蛙，嘴对着嘴，把青蛙嘴当茶杯口。结果青蛙醒了，变成一白衣少年：“哪个公主吻了我？”</p><hr><p>　　我听说，有一种驯鹿，很爱长颈鹿的斑纹和气味，但是太矮，又碍于长颈鹿是哑巴，所以没法谈恋爱。于是它们就长起了杉树一样直拔云天的角，然后到处找一个人，在角的顶端造一个房子住着。每天，那个人负责在高树摘果子，送给长颈鹿吃，以促成驯鹿和长颈鹿的爱情——虽然见不到面，但灵魂相通的爱情。</p><hr><p>　　我听说，北方有一种松鼠，特别大，毛茸茸的，睡觉时喜欢摊开四肢，露出软绵绵的肚皮。你抓住一只，混熟了，就可以把它当床，睡在它的肚子上，用它的尾巴做被子。但它喜欢梦游，到处爬，所以你睡着前眼睛明明看见天花板的花纹，醒来时就可能看见松树枝、杉树枝、云、麻雀和松毛虫。</p><hr><p>　　我听说，有一种猫，特别怕冷，一遇到冷环境就全身长起蓬松松软绵绵的长毛，并且开始冬眠，怎么叫都不醒。冬天你把它挂在脖子上出门，就好像穿了件毛大衣。到了温暖的室内，它暖醒了，就喵一声跳下来，自己到炉子旁边去接着睡了。因为冬天很长，它在冬天基本是裘状，所以叫冬裘夏猫。</p><hr><p>　　我听说，有种野猪，睡一觉就长一层脂肪，起来跑一跑就练出一层肌肉，所以他身上肥瘦肥瘦，像夹心饼干。他爱去南方的海边泡澡，泡一身大粒子盐味，吹风，然后哼唧哼唧去温泉，一边蒸自己一边吃树叶子。你埋伏在温泉边，射倒它，能吃到现成的蒸火腿。你最好带蜂蜜，敷一遍再蒸，更好吃。</p><hr><p>　　我听说，以前有人喜欢在海蚌上写故事写诗。你走在海边，海蚌会跟你说：我身上有字，可以给你看噢，但有个条件，我不识字，你得念给我听。你答应了，海蚌就张开壳来，让你给它念故事。如果你看入神忘了继续念，或者企图摘抄剽窃，海蚌就会夹你一下；如果你念得好，海蚌就送你颗珍珠。</p><hr><p>　　我听说，南方有一种鸟，身材纤瘦，尾羽很长，善吟诗，平时看上去盈盈一握，却筋骨健壮。如果你和它混熟了，它就会把身体绷直，你可以握着它的腰，用它的嘴蘸墨、写字，画梅花、打印章时，还可以用它印个浅爪痕。可是它挑剔得很，墨质差，纸脏，字写得难看，或者句子毫无文采，它就会破口大骂：“居然用老娘写这么烂的文章！”</p><hr><p>我听说有种雪狐，极妩媚，皮毛柔滑。善学声音，爱恶作剧，喜在窗外学男主人女同学、女同事等声音，引女主人疑心吵架，引以为乐。被抓住后会要求：给你雪狐裘，放我走吧。若男主人不允，她便媚笑：原来是你舍不得我走啊嗯……女主人遂朝男主人双目圆睁：你留她干嘛，还不放走？心思又活络了嗯？！</p><hr><p>　　我听说，有种熊叫做云熊，其白如雪，其大若垂天之云。春天开始浮游，夏天吸取阳光。冬天，它随风在天空飘荡，到一个寒冷的地方，就开始下一团团的熊绒毛。熊绒可做大衣，闻得到夏天阳光的味道。熊绒落完，它也就飘下地来。你闻以蜂蜜，冬眠。到春天它长起了毛，就又变成云浮起来了。</p><hr><p>　　我听说有种蜗牛，寿命很长，以八千岁为春，以八千岁为秋。丈夫对妻子说，我要吻你一下，然后出门去买报纸。妻子就闭上眼，等了八天，吻到了，于是丈夫出门了。等他回来，妻子抱怨说：你这一走就是六百年，我好担心。丈夫说：哎呀，我是怕又过时了，站在那里花二百年把新闻看了嘛。</p><hr><p>　　我听说有种章鱼，善于下厨。你坐柜台后面，问它要三明治寿司刺身铁板烧咖啡茶涮锅烤串回锅肉，它舞起手臂们，切剔炒烹翻炸调撒料颠勺，又快又好，还能剩出三只手，一只负责收钱，两只和你打扑克解闷。但它开不起玩笑，偶尔它不小心手臂被铁板烫到，你可不能说“那我要这条章鱼烧！” 不然它就会舞起锅铲，任你是三头六臂也挡不住它四面八方朝你扔鱼丸。</p><hr><p>　　我听说有种虎鲸，很温柔，喜欢光，不潜游，但又怕晒。你在它背上铺沙子，张阳伞，它便喜欢你，任你在它背上住下，钓鱼、睡午觉、接吻、喝果汁。每天它张嘴吞许多小鱼，自己吃些，剩下的喷水送给你，于是你天天有新鲜刺身吃。偶然它也馋，愿意吃熟的，就会张嘴，要你抛给吃章鱼烧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2743275-9bfadb628569fe76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
